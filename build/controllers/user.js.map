{"version":3,"sources":["../../server/controllers/user.js"],"names":["passport","require","jwt","fs","path","getErrorMessage","err","message","code","errName","errors","validateLoginForm","payload","isFormValid","email","trim","length","password","success","exports","signin","req","res","next","authenticate","user","info","status","json","sub","_id","cert","readFileSync","join","__dirname","token","sign","algorithm","data","name","console","error","signup","body","provider","save","saveOAuthUserProfile","profile","done","findOne","providerId","possibleUsername","username","split","findUniqueUsername","availableUsername"],"mappings":"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","file":"user.js","sourcesContent":["// Invoke 'strict' JavaScript mode\n'use strict';\n\n// Load the module dependencies\nimport User from \"../models/user\";\nconst passport = require('passport');\nconst jwt = require('jsonwebtoken');\nconst fs = require('fs');\nconst path = require('path');\n\n// Create a new error handling controller method\nvar getErrorMessage = function (err) {\n    // Define the error message variable\n    var message = '';\n\n    // If an internal MongoDB error occurs get the error message\n    if (err.code) {\n        switch (err.code) {\n            // If a unique index error occurs set the message error\n            case 11000:\n            case 11001:\n                message = 'Username already exists';\n                break;\n                // If a general error occurs set the message error\n            default:\n                message = 'Something went wrong';\n        }\n    } else {\n        // Grab the first error message from a list of possible errors\n        for (var errName in err.errors) {\n            if (err.errors[errName].message) message = err.errors[errName].message;\n        }\n    }\n\n    // Return the message error\n    return message;\n};\n/**\n * Validate the login form\n *\n * @param {object} payload - the HTTP body message\n * @returns {object} The result of validation. Object contains a boolean validation result,\n *                   errors tips, and a global message for the whole form.\n */\nfunction validateLoginForm(payload) {\n    const errors = {};\n    let isFormValid = true;\n    let message = '';\n\n    if (!payload || typeof payload.email !== 'string' || payload.email.trim().length === 0) {\n        isFormValid = false;\n        errors.email = 'Please provide your email address.';\n    }\n\n    if (!payload || typeof payload.password !== 'string' || payload.password.trim().length === 0) {\n        isFormValid = false;\n        errors.password = 'Please provide your password.';\n    }\n\n    if (!isFormValid) {\n        message = 'Check the form for errors.';\n    }\n\n    return {\n        success: isFormValid,\n        message,\n        errors\n    };\n}\nexports.signin = function (req, res, next) {\n    passport.authenticate('local', function (err, user, info) {\n        if (err) {\n            return next(err);\n        }\n        if (!user) {\n            return res.status(400).json(info);\n        }\n\n        const payload = {\n            sub: user._id\n        };\n\n        try {\n            // sign with RSA SHA256\n            var cert = fs.readFileSync(path.join(__dirname, '/../../key/jwtRS256.key')); // get private key\n\n            // create a token string\n            const token = jwt.sign(payload, cert, {\n                algorithm: 'RS256'\n            });\n            const data = {\n                name: user.name\n            };\n\n            return res.json({\n                success: true,\n                message: 'You have successfully logged in!',\n                token,\n                user: data\n            });\n        } catch (err) {\n            console.error(err);\n            res.status(500).json({\n                message: `Internal Server Error: ${err}`\n            });\n        }\n    })(req, res, next);\n}\n// Create a new controller method that creates new 'regular' users\nexports.signup = function (req, res, next) {\n    passport.authenticate('local', function (err, user, info) {\n        if (err) {\n            return next(err);\n        }\n        // Create a new 'User' model instance\n        var user = new User(req.body);\n        var message = null;\n\n        // Set the user provider property\n        user.provider = 'local';\n\n        // Try saving the new user document\n        user.save(function (err) {\n            console.error(err);\n            // If an error occurs, use flash messages to report the error\n            if (err) {\n                // Use the error handling method to get the error message\n                var message = getErrorMessage(err);\n\n                return res.status(400).json({\n                    message: message\n                });\n            }\n            return res.status(200).json({\n                message: \"User was created successfully\"\n            });\n        });\n    })(req, res, next);\n};\n\n// Create a new controller method that creates new 'OAuth' users\nexports.saveOAuthUserProfile = function (req, profile, done) {\n    // Try finding a user document that was registered using the current OAuth provider\n    User.findOne({\n        provider: profile.provider,\n        providerId: profile.providerId\n    }, function (err, user) {\n        // If an error occurs continue to the next middleware\n        if (err) {\n            return done(err);\n        } else {\n            // If a user could not be found, create a new user, otherwise, continue to the next middleware\n            if (!user) {\n                // Set a possible base username\n                var possibleUsername = profile.username || ((profile.email) ? profile.email.split('@')[0] : '');\n\n                // Find a unique available username\n                User.findUniqueUsername(possibleUsername, null, function (availableUsername) {\n                    // Set the available user name\n                    profile.username = availableUsername;\n\n                    // Create the user\n                    user = new User(profile);\n\n                    // Try saving the new user document\n                    user.save(function (err) {\n                        // Continue to the next middleware\n                        return done(err, user);\n                    });\n                });\n            } else {\n                // Continue to the next middleware\n                return done(err, user);\n            }\n        }\n    });\n};\n"]}