{"version":3,"sources":["../../server/middleware/auth-check.js"],"names":["jwt","require","User","fs","path","module","exports","req","res","next","headers","authorization","status","end","token","split","cert","readFileSync","join","__dirname","verify","algorithm","err","decoded","json","message","userId","sub","findById","userErr","user","console","error"],"mappings":"AAAA;;AACA,MAAMA,MAAMC,QAAQ,cAAR,CAAZ;AACA,MAAMC,OAAOD,QAAQ,gBAAR,CAAb;AACA,MAAME,KAAKF,QAAQ,IAAR,CAAX;AACA,MAAMG,OAAOH,QAAQ,MAAR,CAAb;;AAEA;;;AAGAI,OAAOC,OAAP,GAAiB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACnC,MAAI,CAACF,IAAIG,OAAJ,CAAYC,aAAjB,EAAgC;AAC9B,WAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACD;;AAED;AACA,QAAMC,QAAQP,IAAIG,OAAJ,CAAYC,aAAZ,CAA0BI,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;;AAEA,MAAI;AACF,UAAMC,OAAOb,GAAGc,YAAH,CAAgBb,KAAKc,IAAL,CAAUC,SAAV,EAAqB,yBAArB,CAAhB,CAAb,CADE,CAC6E;AAC/E;AACA,WAAOnB,IAAIoB,MAAJ,CAAWN,KAAX,EAAkBE,IAAlB,EAAwB,EAAEK,WAAW,OAAb,EAAxB,EAA+C,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACtE;AACA,UAAID,GAAJ,EAAS;AACP,eAAOd,IAAII,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqB;AAC1BC,mBAAU,cAAaH,GAAI;AADD,SAArB,CAAP;AAGD;;AAED,YAAMI,SAASH,QAAQI,GAAvB;;AAEA;AACA,aAAOzB,KAAK0B,QAAL,CAAcF,MAAd,EAAsB,CAACG,OAAD,EAAUC,IAAV,KAAmB;AAC9C,YAAID,WAAW,CAACC,IAAhB,EAAsB;AACpB,iBAAOtB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACD;;AAED,eAAOJ,MAAP;AACD,OANM,CAAP;AAOD,KAlBM,CAAP;AAmBD,GAtBD,CAsBE,OAAOa,GAAP,EAAY;AACZS,YAAQC,KAAR,CAAcV,GAAd;AACAd,QAAII,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqB;AACnBC,eAAU,0BAAyBH,GAAI;AADpB,KAArB;AAGD;AACF,CApCD","file":"auth-check.js","sourcesContent":["'use strict';\nconst jwt = require('jsonwebtoken');\nconst User = require(\"../models/user\");\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n *  The Auth Checker middleware function.\n */\nmodule.exports = (req, res, next) => {\n  if (!req.headers.authorization) {\n    return res.status(401).end();\n  }\n\n  // get the last part from a authorization header string like \"bearer token-value\"\n  const token = req.headers.authorization.split(' ')[1];\n\n  try {\n    const cert = fs.readFileSync(path.join(__dirname, '/../../key/jwtRS256.pem')); // get public key\n    // decode the token using a secret key-phrase\n    return jwt.verify(token, cert, { algorithm: 'RS256'}, (err, decoded) => {\n      // the 401 code is for unauthorized status\n      if (err) {\n        return res.status(401).json({\n          message: `JWT Error: ${err}`\n        });\n      }\n\n      const userId = decoded.sub;\n\n      // check if a user exists\n      return User.findById(userId, (userErr, user) => {\n        if (userErr || !user) {\n          return res.status(401).end();\n        }\n\n        return next();\n      });\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({\n      message: `Internal Server Error: ${err}`\n    });\n  }\n};\n"]}