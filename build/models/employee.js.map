{"version":3,"sources":["../../server/models/employee.js"],"names":["Schema","employeeSchema","id","Number","name","type","Object","required","text","gender","String","age","managerId","reports","managerName","title","department","email","phone","address","zipcode","salary","isCurrent","Boolean","startDate","Date","leaveData","nationality","timestamps","virtual","get","first","last","set","v","substr","indexOf","pre","next","updatedAt","now","index","getters","virtuals","Employee","model","module","exports"],"mappings":";;AAAA;;;;;;AACA,IAAIA,SAAS,mBAASA,MAAtB;;AAEA,IAAIC,iBAAiB,IAAID,MAAJ,CAAW;AAC9BE,MAAIC,MAD0B;AAE9BC,QAAM;AACJC,UAAMC,MADF;AAEJC,cAAU,IAFN;AAGJC,UAAM;AAHF,GAFwB;AAO9BC,UAAQC,MAPsB;AAQ9BC,OAAKR,MARyB;AAS9BS,aAAWT,MATmB;AAU9BU,WAASV,MAVqB;AAW9BW,eAAaJ,MAXiB;AAY9BK,SAAOL,MAZuB;AAa9BM,cAAYN,MAbkB;AAc9BO,SAAOP,MAduB;AAe9BQ,SAAOR,MAfuB;AAgB9BS,WAAST,MAhBqB;AAiB9BU,WAASV,MAjBqB;AAkB9BW,UAAQlB,MAlBsB;AAmB9BmB,aAAWC,OAnBmB;AAoB9BC,aAAWC,IApBmB;AAqB9BC,aAAWD,IArBmB;AAsB9BE,eAAajB;AAtBiB,CAAX,EAuBlB;AACDkB,cAAY;AADX,CAvBkB,CAArB;;AA4BA3B,eAAe4B,OAAf,CAAuB,UAAvB,EAAmCC,GAAnC,CAAuC,YAAY;AACjD,SAAO,KAAK1B,IAAL,CAAU2B,KAAV,GAAkB,GAAlB,GAAwB,KAAK3B,IAAL,CAAU4B,IAAzC;AACD,CAFD,EAEGC,GAFH,CAEO,UAAUC,CAAV,EAAa;AAClB,OAAK9B,IAAL,CAAU2B,KAAV,GAAkBG,EAAEC,MAAF,CAAS,CAAT,EAAYD,EAAEE,OAAF,CAAU,GAAV,CAAZ,CAAlB;AACA,OAAKhC,IAAL,CAAU4B,IAAV,GAAiBE,EAAEC,MAAF,CAASD,EAAEE,OAAF,CAAU,GAAV,IAAiB,CAA1B,CAAjB;AACD,CALD,EAKG;AACHnC,eAAeoC,GAAf,CAAmB,MAAnB,EAA2B,UAAUC,IAAV,EAAgB;AACzC,OAAKC,SAAL,GAAiBd,KAAKe,GAAL,EAAjB;AACAF;AACD,CAHD;AAIArC,eAAewC,KAAf,CAAqB;AACnBrC,QAAM;AADa,CAArB;AAGA;AACAH,eAAegC,GAAf,CAAmB,QAAnB,EAA6B;AAC5BS,WAAS,IADmB;AAE5BC,YAAU;AAFkB,CAA7B;;AAKA,MAAMC,WAAW,mBAASC,KAAT,CAAe,WAAf,EAA4B5C,cAA5B,CAAjB;;AAEA6C,OAAOC,OAAP,GAAiBH,QAAjB","file":"employee.js","sourcesContent":["import mongoose from \"mongoose\";\nvar Schema = mongoose.Schema;\n\nvar employeeSchema = new Schema({\n  id: Number,\n  name: {\n    type: Object,\n    required: true,\n    text: true\n  },\n  gender: String,\n  age: Number,\n  managerId: Number,\n  reports: Number,\n  managerName: String,\n  title: String,\n  department: String,\n  email: String,\n  phone: String,\n  address: String,\n  zipcode: String,\n  salary: Number,\n  isCurrent: Boolean,\n  startDate: Date,\n  leaveData: Date,\n  nationality: String\n}, {\n  timestamps: true\n});\n\n\nemployeeSchema.virtual('fullName').get(function () {\n  return this.name.first + ' ' + this.name.last;\n}).set(function (v) {\n  this.name.first = v.substr(0, v.indexOf(' '));\n  this.name.last = v.substr(v.indexOf(' ') + 1);\n});;\nemployeeSchema.pre('save', function (next) {\n  this.updatedAt = Date.now();\n  next();\n});\nemployeeSchema.index({\n  name: 'text'\n});\n// Configure the 'employeeSchema' to use getters and virtuals when transforming to JSON\nemployeeSchema.set('toJSON', {\n\tgetters: true,\n\tvirtuals: true\n});\n\nconst Employee = mongoose.model(\"employees\", employeeSchema);\n\nmodule.exports = Employee;\n"]}