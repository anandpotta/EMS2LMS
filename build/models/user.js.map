{"version":3,"sources":["../../server/models/user.js"],"names":["bcrypt","require","saltRounds","Schema","userSchema","email","type","String","index","unique","password","required","nikename","bio","timestamps","pre","next","user","isModified","genSalt","err","salt","hash","hashedPassword","updatedAt","Date","now","methods","authenticate","cb","compareSync","name","displayName","username","User","model","module","exports"],"mappings":";;AAAA;;;;;;AACA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,MAAMC,aAAa,EAAnB;;AAGA,IAAIC,SAAS,mBAASA,MAAtB;AACA,IAAIC,aAAa,IAAID,MAAJ,CAAW;AAC1BE,SAAO;AACLC,UAAMC,MADD;AAELC,WAAO,EAAEC,QAAQ,IAAV;AAFF,GADmB;AAK1BC,YAAU;AACRJ,UAAMC,MADE;AAERI,cAAU;AAFF,GALgB;AAS1BC,YAAUL,MATgB;AAU1BM,OAAKN;AAVqB,CAAX,EAWd;AACDO,cAAY;AADX,CAXc,CAAjB;;AAgBAV,WAAWW,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACrC,MAAIC,OAAO,IAAX;;AAEA,MAAI,CAACA,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAChC,WAAOF,MAAP;AACD;;AAEDhB,SAAOmB,OAAP,CAAejB,UAAf,EAA2B,UAAUkB,GAAV,EAAeC,IAAf,EAAqB;AAC9C,QAAID,GAAJ,EAAS;AACP,aAAOJ,KAAKI,GAAL,CAAP;AACD;AACDpB,WAAOsB,IAAP,CAAYL,KAAKP,QAAjB,EAA2BW,IAA3B,EAAiC,UAAUD,GAAV,EAAeG,cAAf,EAA+B;AAC9D,UAAIH,GAAJ,EAAS;AACP,eAAOJ,KAAKI,GAAL,CAAP;AACD;AACDH,WAAKP,QAAL,GAAgBa,cAAhB;AACA,WAAKC,SAAL,GAAiBC,KAAKC,GAAL,EAAjB;AACAV;AACD,KAPD;AAQD,GAZD;AAaD,CApBD;;AAsBAZ,WAAWuB,OAAX,CAAmBC,YAAnB,GAAkC,UAAUlB,QAAV,EAAoBmB,EAApB,EAAwB;AACxD,SAAO7B,OAAO8B,WAAP,CAAmBpB,QAAnB,EAA6B,KAAKA,QAAlC,CAAP;AACD,CAFD;;AAIAN,WAAWuB,OAAX,CAAmBI,IAAnB,GAA0B,YAAY;AACpC,SAAO,KAAKC,WAAL,IAAoB,KAAKC,QAAhC;AACD,CAFD;;AAIA,MAAMC,OAAO,mBAASC,KAAT,CAAe,MAAf,EAAuB/B,UAAvB,CAAb;AACAgC,OAAOC,OAAP,GAAiBH,IAAjB","file":"user.js","sourcesContent":["import mongoose from \"mongoose\";\nvar bcrypt = require('bcrypt');\nconst saltRounds = 10;\n\n\nvar Schema = mongoose.Schema;\nvar userSchema = new Schema({\n  email: {\n    type: String,\n    index: { unique: true }\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  nikename: String,\n  bio: String\n}, {\n  timestamps: true\n});\n\n\nuserSchema.pre(\"save\", function (next) {\n  var user = this;\n\n  if (!user.isModified(\"password\")) {\n    return next();\n  }\n\n  bcrypt.genSalt(saltRounds, function (err, salt) {\n    if (err) {\n      return next(err);\n    }\n    bcrypt.hash(user.password, salt, function (err, hashedPassword) {\n      if (err) {\n        return next(err);\n      }\n      user.password = hashedPassword;\n      this.updatedAt = Date.now();\n      next();\n    });\n  });\n});\n\nuserSchema.methods.authenticate = function (password, cb) {\n  return bcrypt.compareSync(password, this.password);\n};\n\nuserSchema.methods.name = function () {\n  return this.displayName || this.username;\n};\n\nconst User = mongoose.model(\"user\", userSchema);\nmodule.exports = User;\n"]}