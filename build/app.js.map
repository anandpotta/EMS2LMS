{"version":3,"sources":["../server/app.js"],"names":["Promise","global","connect","db","uri","options","error","console","log","app","use","static","json","join","require","clientErrorHandler","logErrors","cors","authCheckMiddleware","process","env","NODE_ENV","morgan","auth","get","req","res","sendFile","resolve","port","PORT","server","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAwCA;;;;AACA;;;;AACA;;;;;;AAvCA,mBAASA,OAAT,GAAmBC,OAAOD,OAA1B;AACA,mBAASE,OAAT,CAAiB,iBAAOC,EAAP,CAAUC,GAA3B,EAAgC,iBAAOD,EAAP,CAAUE,OAA1C,EAAmD,UAAUC,KAAV,EAAiB;AAChE;AACA,QAAIA,KAAJ,EAAWC,QAAQD,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACXC,YAAQC,GAAR,CAAY,sBAAZ,EAAoC,iBAAOL,EAAP,CAAUC,GAA9C;AACH,CAJD;;AAOA,MAAMK,MAAM,wBAAZ;AACA,wBAAaA,GAAb;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;AACAH,IAAIC,GAAJ,CAAQ,4BAAQ,eAAKG,IAAL,CAAU,QAAV,EAAoB,QAApB,EAA8B,aAA9B,CAAR,CAAR;;AAEA;AACA,MAAMP,QAAQQ,QAAQ,oBAAR,CAAd;AACAL,IAAIC,GAAJ,CAAQJ,MAAMS,kBAAd;AACAN,IAAIC,GAAJ,CAAQJ,MAAMU,SAAd;;AAEA;AACA,MAAMC,OAAOH,QAAQ,mBAAR,CAAb;AACAL,IAAIC,GAAJ,CAAQO,IAAR;;AAEA;AACA,MAAMC,sBAAsBJ,QAAQ,yBAAR,CAA5B;AACAL,IAAIC,GAAJ,CAAQ,MAAR,EAAgBQ,mBAAhB;;AAGA,IAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxC;AACA,UAAMC,SAASR,QAAQ,QAAR,CAAf;AACAL,QAAIC,GAAJ,CAAQY,OAAO,KAAP,CAAR;AACH,CAJD,MAIO,IAAIH,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAC9CZ,QAAIC,GAAJ,CAAQ,4BAAR;AACH;;AAED,MAAMa,OAAOT,QAAQ,eAAR,CAAb;;;AAKAL,IAAIC,GAAJ,CAAQ,OAAR,EAAiBa,IAAjB;AACAd,IAAIC,GAAJ,CAAQ,WAAR;AACAD,IAAIC,GAAJ,CAAQ,iBAAR;AACAD,IAAIC,GAAJ,CAAQ,eAAR;AACAD,IAAIe,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvBnB,YAAQC,GAAR,CAAY,mBAAZ;AACAkB,QAAIC,QAAJ,CAAa,eAAKC,OAAL,CAAa,mBAAb,CAAb;AACH,CAHD;;AAKA,MAAMC,OAAOV,QAAQC,GAAR,CAAYU,IAAZ,IAAoB,iBAAOC,MAAP,CAAcF,IAA/C;AACApB,IAAIuB,MAAJ,CAAWH,IAAX,EAAiB,MAAM;AACnBtB,YAAQC,GAAR,CAAY,4CAAZ,EAA0DqB,IAA1D,EAAgEpB,IAAIe,GAAJ,CAAQ,KAAR,CAAhE;AACH,CAFD","file":"app.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport compression from 'compression';\nimport mongoose from \"mongoose\";\nimport initPassport from \"./config/passport\";\nimport config from './config';\nimport path from \"path\";\nimport favicon from 'serve-favicon';\nimport 'babel-polyfill';\n\n\nmongoose.Promise = global.Promise;\nmongoose.connect(config.db.uri, config.db.options, function (error) {\n    // Check error in initial connection. There is no 2nd param to the callback.\n    if (error) console.error('ERROR:', error);\n    console.log('Connect to database:', config.db.uri);\n});\n\n\nconst app = express();\ninitPassport(app);\napp.use(express.static('static'));\napp.use(bodyParser.json());\napp.use(favicon(path.join('static', 'images', 'favicon.ico')));\n\n// Enbale error handling\nconst error = require('./middleware/error');\napp.use(error.clientErrorHandler);\napp.use(error.logErrors);\n\n// enable server cors mode\nconst cors = require('./middleware/cors');\napp.use(cors);\n\n// pass the authorization checker middleware\nconst authCheckMiddleware = require('./middleware/auth-check');\napp.use('/api', authCheckMiddleware);\n\n\nif (process.env.NODE_ENV === 'development') {\n    //use logger\n    const morgan = require(\"morgan\");\n    app.use(morgan('dev'));\n} else if (process.env.NODE_ENV === 'production') {\n    app.use(compression());\n}\n\nconst auth = require('./routes/auth');\nimport user from './routes/user';\nimport department from './routes/department';\nimport employee from './routes/employee';\n\napp.use('/auth', auth);\napp.use('/api/user', user);\napp.use('/api/department', department);\napp.use('/api/employee', employee);\napp.get('*', (req, res) => {\n    console.log('route to no where');\n    res.sendFile(path.resolve('static/index.html'));\n});\n\nconst port = process.env.PORT || config.server.port;\napp.listen(port, () => {\n    console.log('Express server listening on %d, in %s mode', port, app.get('env'));\n});\n"]}